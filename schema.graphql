type Achievement {
  awards: [Award!]!
  description: String!
  icon: String!
  id: String!
  name: String!
  tags: [String!]!
}

type AdvancMultipliers {
  coefficient: Float!
  statId: String!
}

type Assets {
  activeImitation: String!
  advanceGrayPainting: String!
  advancePainting: String!
  avatar: String!
  backPhoto: String!
  characterArtwork: String!
  descPainting: String!
  grayPainting: String!
  inactiveImitation: String!
  lotteryCardImage: String!
  matrixPainting: String!
  namePicture: String!
  painting: String!
  rarityIcon: String!
  thumbPainting: String!
  titlePicture: String!
  weaponShowPicture: String!
}

type Awakening {
  description: String!
  icon: String!
  name: String!
  need: Int!
}

type Award {
  amount: Int!
  type: String!
}

type Banner {
  bannerNumber: Int!
  category: String
  detailsLink: String!
  element: String
  endDate: String!
  isCollab: Boolean!
  isFinalBanner: Boolean!
  isLimitedBannerOnly: Boolean!
  isReleased: Boolean!
  isRerun: Boolean!
  matrixId: String
  noWeapon: Boolean!
  simulacrumId: String
  simulacrumName: String
  startDate: String!
  weaponId: String
}

type BaseStats {
  icon: String!
  id: String!
  name: String!
  upgradeProp: Float!
  value: Float!
}

type Fashion {
  assets: FashionAssets!
  description: String!
  id: String!
  name: String!
  rarity: Int!
  simulacrumId: String!
  source: String!
  weaponId: String!
}

type FashionAssets {
  grayPainting: String!
  painting: String!
}

type Food {
  buff: String!
  categories: [String!]!
  description: String!
  effect: String
  icon: String!
  id: String!
  ingredients: [Ingredient!]!
  name: String!
  rarity: Int!
  stars: Int!
}

type GuideBookItem {
  description: String!
  icon: String!
  title: String!
}

type Guidebook {
  icon: String!
  id: String!
  items: [GuideBookItem!]!
  menuId: String!
  menuType: String!
  name: String!
}

type Ingredient {
  matID: Item!
  max: String!
  min: String!
}

type Item {
  description: String
  icon: String
  id: String!
  name: String
  rarity: Int!
  type: String!
}

type LevelUpgrade {
  mats: [UpgradeMaterial!]!
  requiredExp: Int!
}

type Matrice {
  assets: MatrixAssets!
  banners: [Banner!]!
  description: String!
  id: String!
  meta: MatrixMeta!
  name: String!
  rarity: Int!
  sets: [MatriceSet!]!
  simulacrumId: String
  version: String!
}

type MatriceSet {
  description: String
  need: Int
}

type MatrixAssets {
  characterArtwork: String
  icon: String!
  iconLarge: String!
}

type MatrixMeta {
  recommendedWeapons: [String!]!
}

type MetaData {
  analyticVideoId: String
  lastUpdated: MetaLastUpdated!
  rating: [Float!]!
  recommendedMatrices: [RecoMatrix!]!
  recommendedPairings: [String!]!
}

type MetaLastUpdated {
  timestamp: Int!
  username: String!
}

type Mount {
  assets: MountAsset!
  description: String!
  id: String!
  name: String
  rarity: Int!
  unlockItems: [UnlockItem!]!
  version: String!
}

type MountAsset {
  icon: String!
  showImage: String!
}

type MountPart {
  description: String!
  icon: String!
  id: String!
  name: String!
  rarity: Int!
  type: String!
}

type Outfit {
  description: String
  icon: String!
  id: String!
  name: String
  source: String
  type: String!
}

type Query {
  achievement(id: String!, lang: String! = "en"): Achievement!
  achievements(lang: String! = "en"): [Achievement!]!
  banners(includeUnreleased: Boolean! = false): [Banner!]!
  food(id: String!, lang: String! = "en"): Food!
  foods(lang: String! = "en"): [Food!]!
  guidebook(id: String!, lang: String! = "en"): Guidebook!
  guidebooks(lang: String! = "en"): [Guidebook!]!
  item(id: String!, lang: String! = "en"): Item!
  items(lang: String! = "en"): [Item!]!
  matrices(includeUnreleased: Boolean! = false, lang: String! = "en"): [Matrice!]!
  matrix(id: String!, lang: String! = "en"): Matrice!
  mount(id: String!, lang: String! = "en"): Mount!
  mounts(lang: String! = "en"): [Mount!]!
  outfit(id: String!, lang: String! = "en"): Outfit!
  outfits(lang: String! = "en"): [Outfit!]!
  relic(id: String!, lang: String! = "en"): Relic!
  relics(lang: String! = "en"): [Relic!]!
  servant(id: String!, lang: String! = "en"): SmartServant!
  servants(lang: String! = "en"): [SmartServant!]!
  simulacra(includeUnreleased: Boolean! = false, lang: String! = "en"): [Simulacra!]!
  simulacra_v2(includeUnreleased: Boolean! = false, lang: String! = "en"): [SimulacraV2!]!
  simulacrum(id: String!, lang: String! = "en"): Simulacra!
  simulacrum_v2(id: String!, lang: String! = "en"): SimulacraV2!
  weapon(id: String!, lang: String! = "en"): Weapon!
  weapons(includeUnreleased: Boolean! = false, lang: String! = "en"): [Weapon!]!
}

type RecoMatrix {
  id: String!
  pieces: Int!
}

type Relic {
  advancements: [String!]!
  description: String
  icon: String!
  id: String!
  name: String!
  rarity: Int!
  source: String
  type: String!
  version: String!
}

type ServantAsset {
  activatedIcon: String!
  itemIcon: String!
  petIcon: String!
}

type ServantSkill {
  description: String!
  icon: String!
  name: String!
}

type ServantUpgrade {
  id: String!
  xpGain: Int!
}

type ShatterOrCharge {
  tier: String!
  value: Float!
}

type Simulacra {
  advanceId: String
  affiliation: String
  assetsA0: Assets!
  assetsA3: Assets
  avatarId: String!
  awakening: [Awakening!]!
  banners: [Banner!]!
  birthday: String
  dislikedGiftTypes: [String!]!
  fashion: [Fashion!]!
  gender: String
  guidebook: [GuideBookItem!]!
  height: String
  homeTown: String
  id: String!
  isReleased: Boolean!
  likedGiftTypes: [String!]!
  matrixId: String
  name: String!
  rarity: Int!
  unlockInfo: String!
  version: String!
  voicing: VoiceActors!
  weaponId: String
}

type SimulacraV2 {
  advanceId: String
  affiliation: String
  assetsA0: Assets!
  assetsA3: Assets
  avatarId: String!
  awakening: [Awakening!]!
  banners: [Banner!]!
  birthday: String
  dislikedGiftTypes: [String!]!
  fashion: [Fashion!]!
  gender: String
  guidebook: [GuideBookItem!]!
  height: String
  homeTown: String
  id: String!
  isReleased: Boolean!
  likedGiftTypes: [String!]!
  matrix: Matrice
  matrixId: String
  name: String!
  rarity: Int!
  unlockInfo: String!
  version: String!
  voicing: VoiceActors!
  weapon: Weapon
  weaponId: String
}

type Skill {
  description: String
  icon: String
  name: String
  operations: [String!]!
  tags: [String!]!
  values: [[Float!]!]!
}

type SmartServant {
  assets: ServantAsset!
  description: String!
  element: String!
  id: String!
  name: String!
  rarity: Int!
  skills: [ServantSkill!]!
  type: String!
  upgradeItems: [ServantUpgrade!]!
}

type UnlockItem {
  amount: Int!
  item: MountPart!
}

type UpgradeMaterial {
  amount: Int
  description: String
  icon: String
  matId: String
  name: String
  rarity: Int
  type: String
}

type VoiceActors {
  cn: String
  en: String
  jp: String
  kr: String
  pt: String
}

type Weapon {
  advanceId: String
  assets: WeaponAssets!
  banners: [Banner!]!
  category: String!
  charge: ShatterOrCharge!
  description: String!
  element: String!
  elementEffect: WeaponEffect
  id: String!
  meta: MetaData!
  name: String!
  rarity: Int!
  shatter: ShatterOrCharge!
  simulacrumId: String
  upgradeMats: WeaponMats
  version: String!
  weaponAdvancements: [WeaponAdvancement!]!
  weaponAttacks: WeaponAttacks!
  weaponEffects: [WeaponEffect!]!
  weaponStats: [BaseStats!]!
}

type WeaponAdvancement {
  charge: ShatterOrCharge!
  description: String
  multiplier: [AdvancMultipliers!]!
  need: String
  shatter: ShatterOrCharge!
}

type WeaponAssets {
  characterArtwork: String
  icon: String
  weaponIconForMatrix: String
}

type WeaponAttacks {
  discharge: [Skill!]!
  dodge: [Skill!]!
  normals: [Skill!]!
  skill: [Skill!]!
}

type WeaponEffect {
  description: String!
  title: String!
}

type WeaponMats {
  id: String!
  levels: [LevelUpgrade!]!
}
