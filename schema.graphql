type AchievementType {
  amount: Int!
  description: String!
  icon: String!
  id: String!
  name: String!
  rewards: [RewardType!]!
  tags: [String!]!
}

type AdvancMultipliersType {
  coefficient: Float!
  statId: String!
}

type AwakeningType {
  description: String
  icon: String
  name: String
  need: Int
}

type BannerType {
  bannerNumber: Int!
  category: String
  detailsLink: String!
  element: String
  endDate: String!
  isCollab: Boolean!
  isFinalBanner: Boolean!
  isLimitedBannerOnly: Boolean!
  isRerun: Boolean!
  matrixId: String
  noWeapon: Boolean!
  rarity: Int!
  simulacrumIcon: String
  simulacrumId: String
  simulacrumName: String
  startDate: String!
  weaponIcon: String
  weaponId: String
}

type BaseStatType {
  flat: Boolean!
  icon: String!
  isTag: Boolean!
  modifierOp: String!
  multiplier: Float!
  name: String!
  propName: String!
  propValue: Float!
}

type BaseStatsType {
  icon: String
  id: String!
  name: String!
  upgradeProp: Float!
  value: Float!
}

type FoodType {
  buff: String!
  categories: [String!]!
  description: String!
  effect: String
  icon: String
  id: String!
  ingredients: [IngredientType!]!
  name: String!
  rarity: Int!
  stars: Int!
}

type GearType {
  baseStat: [BaseStatType!]!
  description: String!
  icon: String!
  id: String!
  name: String!
  props: [PropType!]!
  rarity: Int!
  statPool: [StatPoolType!]!
  type: String!
}

type GiftTagType {
  name: String!
  tagId: String!
}

type GuideBookItemType {
  description: String!
  icon: String!
  title: String!
}

type GuideBookType {
  icon: String!
  id: String!
  items: [GuideBookItemType!]!
  menuId: String!
  menuType: String!
  name: String!
}

type IngredientType {
  matID: ItemType!
  max: Int!
  min: Int!
}

type ItemType {
  description: String
  giftTags: [GiftTagType!]!
  icon: String
  id: String!
  name: String
  rarity: Int!
  type: String!
}

type LevelUpgradeType {
  mats: [UpgradeMaterialType!]!
  requiredExp: Int!
}

type MatrixAssetType {
  characterArtwork: String
  icon: String
  iconLarge: String
}

type MatrixMetaType {
  recommendedWeapons: [String!]!
}

type MatrixSetType {
  description: String!
  need: Int!
}

type MatrixType {
  assets: MatrixAssetType!
  banners: [BannerType!]!
  description: String!
  id: String!
  meta: MatrixMetaType!
  name: String!
  rarity: Int!
  sets: [MatrixSetType!]!
  simulacrumId: String
  version: String
  weaponId: String
}

type MetaDataType {
  analyticVideoId: String
  lastUpdated: MetaLastUpdatedType!
  rating: [Float!]!
  recommendedMatrices: [RecoMatrixType!]!
  recommendedPairings: [String!]!
}

type MetaLastUpdatedType {
  timestamp: String!
  username: String!
}

interface ModelBaseType {
  id: String!
}

type MountAssetType {
  icon: String
  showImage: String
}

type MountPartType {
  description: String!
  icon: String!
  id: String!
  name: String!
  rarity: Int!
  type: String!
}

type MountType {
  assets: MountAssetType!
  description: String!
  id: String!
  name: String!
  rarity: Int!
  unlockItems: [UnlockItemType!]!
  version: String!
}

type OutfitType {
  description: String
  icon: String
  id: String!
  name: String
  source: String
  type: String!
}

type PropType {
  PropId: String!
  PropInitValue: Float!
  PropMaxValue: Float!
  PropMinValue: Float!
  Quality: String!
}

type Query {
  achievement(id: String!, lang: String! = "en", version: String! = "global"): AchievementType!
  achievements(filter: String = null, lang: String! = "en", version: String! = "global"): [AchievementType!]!
  banners(filter: String = null, id: String = null, version: String! = "global"): [BannerType!]!
  food(id: String!, lang: String! = "en", version: String! = "global"): FoodType!
  foods(filter: String = null, lang: String! = "en", version: String! = "global"): [FoodType!]!
  gear(id: String!, lang: String! = "en", version: String! = "global"): GearType!
  gears(filter: String = null, lang: String! = "en", version: String! = "global"): [GearType!]!
  guidebook(id: String!, lang: String! = "en", version: String! = "global"): GuideBookType!
  guidebooks(filter: String = null, lang: String! = "en", version: String! = "global"): [GuideBookType!]!
  item(id: String!, lang: String! = "en", version: String! = "global"): ItemType!
  items(filter: String = null, lang: String! = "en", version: String! = "global"): [ItemType!]!
  matrices(filter: String = null, lang: String! = "en", version: String! = "global"): [MatrixType!]!
  matrix(id: String!, lang: String! = "en", version: String! = "global"): MatrixType!
  mount(id: String!, lang: String! = "en", version: String! = "global"): MountType!
  mounts(filter: String = null, lang: String! = "en", version: String! = "global"): [MountType!]!
  outfit(id: String!, lang: String! = "en", version: String! = "global"): OutfitType!
  outfits(filter: String = null, lang: String! = "en", version: String! = "global"): [OutfitType!]!
  relic(id: String!, lang: String! = "en", version: String! = "global"): RelicType!
  relics(filter: String = null, lang: String! = "en", version: String! = "global"): [RelicType!]!
  research(id: String!, lang: String! = "en", version: String! = "global"): ResearchType!
  researchs(filter: String = null, lang: String! = "en", version: String! = "global"): [ResearchType!]!
  servant(id: String!, lang: String! = "en", version: String! = "global"): SmartServantType!
  servants(filter: String = null, lang: String! = "en", version: String! = "global"): [SmartServantType!]!
  simulacra(filter: String = null, lang: String! = "en", version: String! = "global"): [SimulacraType!]!
  simulacraV2(filter: String = null, lang: String! = "en", version: String! = "global"): [SimulacraV2Type!]!
  simulacrum(id: String!, lang: String! = "en", version: String! = "global"): SimulacraType!
  simulacrumV2(id: String!, lang: String! = "en", version: String! = "global"): SimulacraV2Type!
  weapon(id: String!, lang: String! = "en", version: String! = "global"): WeaponType!
  weapons(filter: String = null, lang: String! = "en", version: String! = "global"): [WeaponType!]!
}

type RecoMatrixType {
  id: String!
  pieces: Int!
}

type RelicType {
  advancements: [String!]!
  description: String
  icon: String
  id: String!
  name: String!
  rarity: Int!
  source: String
  type: String!
  version: String
}

type ResearchMatType {
  amount: Int!
  description: String!
  icon: String!
  id: String!
  name: String!
  rarity: Int!
  type: String!
}

type ResearchRedoType {
  canRedo: Boolean!
  redoAmount: Int!
}

type ResearchReqType {
  id: String!
  stage: Int!
}

type ResearchType {
  group: String!
  id: String!
  redo: ResearchRedoType!
  requirements: [ResearchReqType!]!
  researchMats: [ResearchMatType!]!
  rewards: [ResearchMatType!]!
  stage: Int!
  stageIcon: String!
  stageInfoIcon: String!
}

type RewardType {
  amount: Int!
  description: String!
  icon: String!
  matId: String!
  name: String!
  rarity: Int
  type: String
}

type ServantAdvanceMatType {
  amount: Int!
  description: String!
  icon: String!
  id: String!
  name: String!
  rarity: Int!
  type: String!
}

type ServantAdvancementType {
  description: String!
  mats: [ServantAdvanceMatType!]!
}

type ServantAssetType {
  activatedIcon: String
  itemIcon: String
  petIcon: String
}

type ServantSkillType {
  description: String!
  icon: String
  name: String!
}

type ServantUpgradeMaterialType {
  description: String!
  icon: String!
  id: String!
  name: String!
  rarity: Int!
  type: String!
}

type ServantUpgradeType {
  exp: Int!
  material: ServantUpgradeMaterialType!
}

type ShatterOrChargeType {
  tier: String!
  value: Float!
}

type SimulacraAssetsType {
  activeImitation: String
  advanceGrayPainting: String
  advancePainting: String
  avatar: String
  backPhoto: String
  characterArtwork: String
  descPainting: String
  grayPainting: String
  inactiveImitation: String
  lotteryCardImage: String
  matrixPainting: String
  namePicture: String
  painting: String
  rarityIcon: String
  thumbPainting: String
  titlePicture: String
  weaponShowPicture: String
}

type SimulacraFashionAssetsType {
  grayPainting: String!
  painting: String!
}

type SimulacraFashionType {
  assets: SimulacraFashionAssetsType!
  description: String!
  id: String!
  name: String!
  rarity: Int!
  simulacrumId: String!
  source: String!
  weaponId: String!
}

type SimulacraType implements ModelBaseType {
  advanceId: String
  affiliation: String
  assetsA0: SimulacraAssetsType!
  assetsA3: SimulacraAssetsType
  avatarId: String!
  awakening: [AwakeningType!]!
  banners: [BannerType!]!
  birthday: String
  dislikedGiftTypes: [String!]!
  fashion: [SimulacraFashionType!]!
  gender: String
  guidebook: [GuideBookItemType!]!
  height: String
  homeTown: String
  id: String!
  isReleased: Boolean!
  likedGiftTypes: [String!]!
  limited: Boolean!
  matrixId: String
  name: String!
  rarity: Int!
  unlockInfo: String!
  version: String
  voicing: VoiceActorsType!
  weaponId: String
}

type SimulacraV2Type implements ModelBaseType {
  advanceId: String
  affiliation: String
  assetsA0: SimulacraAssetsType!
  assetsA3: SimulacraAssetsType
  avatarId: String!
  awakening: [AwakeningType!]!
  banners: [BannerType!]!
  birthday: String
  dislikedGiftTypes: [String!]!
  fashion: [SimulacraFashionType!]!
  gender: String
  guidebook: [GuideBookItemType!]!
  height: String
  homeTown: String
  id: String!
  isReleased: Boolean!
  likedGiftTypes: [String!]!
  limited: Boolean!
  matrix: MatrixType
  matrixId: String
  name: String!
  rarity: Int!
  unlockInfo: String!
  version: String
  voicing: VoiceActorsType!
  weapon: WeaponType
  weaponId: String
}

type SkillType {
  description: String
  icon: String
  id: String
  name: String
  operations: [String!]!
  tags: [String!]!
  values: [[Float!]!]!
}

type SmartServantType {
  advancements: [ServantAdvancementType!]!
  assets: ServantAssetType!
  description: String!
  element: String!
  id: String!
  name: String!
  properties: String!
  rarity: Int!
  skills: [ServantSkillType!]!
  type: String!
  upgradeItems: [ServantUpgradeType!]!
}

type StatPoolType {
  flat: Boolean!
  icon: String!
  multiplier: Float!
  name: String!
  propName: String!
  weightValue: Float!
}

type UnlockItemType {
  amount: Int!
  item: MountPartType!
}

type UpgradeMaterialType {
  amount: Int
  description: String
  icon: String
  matId: String
  name: String
  rarity: Int
  type: String
}

type VoiceActorsType {
  cn: String
  en: String
  jp: String
  kr: String
  pt: String
}

type WeaponAdvancementType {
  charge: ShatterOrChargeType!
  description: String
  multiplier: [AdvancMultipliersType!]!
  need: String
  shatter: ShatterOrChargeType!
}

type WeaponAssetsType {
  characterArtwork: String
  icon: String
  weaponIconForMatrix: String
}

type WeaponAttacksType {
  discharge: [SkillType!]!
  dodge: [SkillType!]!
  normals: [SkillType!]!
  skill: [SkillType!]!
}

type WeaponEffectType {
  description: String!
  title: String!
}

type WeaponFashionType {
  description: String
  icon: String
  id: String!
  name: String!
  rarity: Int!
  type: String!
}

type WeaponMatsType {
  id: String!
  levels: [LevelUpgradeType!]!
}

type WeaponType {
  advanceId: String
  assets: WeaponAssetsType!
  banners: [BannerType!]!
  category: String!
  charge: ShatterOrChargeType!
  description: String!
  element: String!
  elementEffect: WeaponEffectType
  fashion: [WeaponFashionType!]!
  id: String!
  limited: Boolean!
  meta: MetaDataType!
  name: String!
  rarity: Int!
  shatter: ShatterOrChargeType!
  simulacrumId: String
  upgradeMats: WeaponMatsType
  version: String!
  weaponAdvancements: [WeaponAdvancementType!]!
  weaponAttacks: WeaponAttacksType!
  weaponEffects: [WeaponEffectType!]!
  weaponStats: [BaseStatsType!]!
}
